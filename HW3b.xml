Your assignment is to create an XML document to represent a set list for a band.  
Each entry should have space to describe the artist(s), title, music genre, and year the song was released.

Your file must include at least 10 songs.  The data must be real, but you can use any artist.

Create a CSS file for aesthetic display of the data.

Note:  You are NOT required to produce DTD, schema, or XSL files, but you may give it a shot if you want 
to explore this technology. (Extra credit may be in order if your work is exemplary).


<grid title="Classes">
    <group name="Assignment">
        <section>       
            <title points="35">LargeNumber Class</title>
            <item points="2">Default constructor initializes and stores 0</item>
            <item points="2">Parameterized constructor assigns length and value</item>
            <item points="2">Add function implemented</item>
            <item points="2">Concatenate function implemented</item>
            <item points="3">Destroy function iterates through LL and deallocates all memory</item>
            <item points="3">All insert functions allocate new node and set pointers correctly, update size</item>
            <item points="3">All remove functions delete node and set pointers correctly, update size</item>
            <item points="8">Throws correct range exceptions in elementAt, insertAt, replace, removeAt  (2 each)</item>
            <item points="3">Next pointer is private</item>
            <item points="3">Number is private</item>
            <item points="2">Print function formatted correctly</item>
            <item points="2">Print function takes an ostream object</item>
            <item points="2">Print function called on 0 prints only 0 and reports size as 1</item>
        </section>
        <section>
            <title points="5">Interactive main</title>
            <item points="2">Reads correctly from stdin and writes to stdout if no parameters</item>
            <item points="2">Reads correctly from input file and writes to output file if given </item>
            <item points="1">Closes files and quits program at end</item>
        </section>
        <section>
            <title points="5">Testing main</title>
            <item points="2">Add function tested</item>
            <item points="2">Concatenate function tested</item>
            <item points="1">Print function tested</item>
        </section>
    </group>
    <group name="Compiling and Memory">
        <section>
            <title points="5">Compiling and Memory</title>
            <item points="0">-1 per warning when compiling</item>
            <item points="5">Program has no memory loss or errors, minimum of -5</item>
        </section>
    </group>
    <group name="Functionality">
        <section>
            <title points="30">Functional Correctness</title>
            <item points="2">Default constructor test matches expected output</item>
            <item points="2">isZero() test matches expected output</item>
            <item points="2">makeZero() test matches expected output</item>
            <item points="2">first() test matches expected output </item>
            <item points="2">last() test matches expected output</item>
            <item points="2">insertLowestDigit() simple test matches expected output</item>
            <item points="2">insertLowestDigit() complex test matches expected output</item>
            <item points="2">insertHighestDigit() simple test matches expected outpu</item>
            <item points="2">insertHighestDigit() complex test matches expected outpu</item>
            <item points="2">insertAt() simple test matches expected output</item>
            <item points="2">replace() simple test matches expected output </item>
            <item points="2">replace() complex test matches expected output</item>
            <item points="2">removeLowestDigit() test matches expected output</item>
            <item points="2">removeHighestDigit() test matches expected output</item>
            <item points="2">removeAt() test matches expected output</item>
        </section>
    </group>
    <group name="Code Style and Internal Documentation">
        <section>
            <title points="10">Coding Style</title>
            <item points="3">Header comments (name, due date, assignment, description)</item>
            <item points="4">Function contracts (purpose, arguments, return)</item>
            <item points="3">Clear, concise, and modular</item>
        </section>
    </group>
    <group name="README">
        <section>
            <title points="10">README</title>
            <item points="1">Title and author's name</item>
            <item points="1">Acknowledgements of help</item>
            <item points="1">Program purpose description</item>
            <item points="1">List and brief purpose/description of provided files</item>
            <item points="1">Compilation line and run instructions</item>
            <item points="1">Outline of data structures and algorithms</item>
            <item points="1">Description of testing</item>
        </section>
    </group>
</grid>
